# coding: utf-8

"""
     

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PortalAPIApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def count_using_get(self, result, **kwargs):  # noqa: E501
        """Count rows matching search parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.count_using_get(result, async=True)
        >>> result = thread.get()

        :param async bool
        :param str result: The result type (data set) to search against. Is mandatory. (required)
        :param str query: A set of search conditions joined by logical operators (AND, OR, NOT) and bound by double quotes. If none supplied, the full result set will be returned.
        :param str data_portal: The data portal ID. Defaults to 'ena'.
        :param bool dcc_data_only: Whether to limit the search to only DCC records. By default, all public data is also included in the search.
        :param bool include_metagenomes: Whether to include public metagenome data in the search. By default, these are not included. Note that any metagenome data associated with a DCC hub will always be included in a search against that DCC.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.count_using_get_with_http_info(result, **kwargs)  # noqa: E501
        else:
            (data) = self.count_using_get_with_http_info(result, **kwargs)  # noqa: E501
            return data

    def count_using_get_with_http_info(self, result, **kwargs):  # noqa: E501
        """Count rows matching search parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.count_using_get_with_http_info(result, async=True)
        >>> result = thread.get()

        :param async bool
        :param str result: The result type (data set) to search against. Is mandatory. (required)
        :param str query: A set of search conditions joined by logical operators (AND, OR, NOT) and bound by double quotes. If none supplied, the full result set will be returned.
        :param str data_portal: The data portal ID. Defaults to 'ena'.
        :param bool dcc_data_only: Whether to limit the search to only DCC records. By default, all public data is also included in the search.
        :param bool include_metagenomes: Whether to include public metagenome data in the search. By default, these are not included. Note that any metagenome data associated with a DCC hub will always be included in a search against that DCC.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['result', 'query', 'data_portal', 'dcc_data_only', 'include_metagenomes']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method count_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'result' is set
        if ('result' not in params or
                params['result'] is None):
            raise ValueError("Missing the required parameter `result` when calling `count_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'result' in params:
            query_params.append(('result', params['result']))  # noqa: E501
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'data_portal' in params:
            query_params.append(('dataPortal', params['data_portal']))  # noqa: E501
        if 'dcc_data_only' in params:
            query_params.append(('dccDataOnly', params['dcc_data_only']))  # noqa: E501
        if 'include_metagenomes' in params:
            query_params.append(('includeMetagenomes', params['include_metagenomes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def do_sample_links_using_get(self, **kwargs):  # noqa: E501
        """Sample links  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.do_sample_links_using_get(async=True)
        >>> result = thread.get()

        :param async bool
        :param str accession: Sample accession
        :param str result: The result type of links.
        :param int offset: How many records to skip from the beginning in the results. Default value is 0.
        :param int limit: The maximum number of records to retrieve. Default value is 100,000. If the full result set is to be fetched, the limit should be set to 0.
        :param str format: What format the results should be returned as: TSV (Tab Separated Values) or JSON. By default, a TSV report is provided.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.do_sample_links_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.do_sample_links_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def do_sample_links_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """Sample links  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.do_sample_links_using_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str accession: Sample accession
        :param str result: The result type of links.
        :param int offset: How many records to skip from the beginning in the results. Default value is 0.
        :param int limit: The maximum number of records to retrieve. Default value is 100,000. If the full result set is to be fetched, the limit should be set to 0.
        :param str format: What format the results should be returned as: TSV (Tab Separated Values) or JSON. By default, a TSV report is provided.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accession', 'result', 'offset', 'limit', 'format']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method do_sample_links_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'accession' in params:
            query_params.append(('accession', params['accession']))  # noqa: E501
        if 'result' in params:
            query_params.append(('result', params['result']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/links/sample', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def do_study_links_using_get(self, **kwargs):  # noqa: E501
        """Study links  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.do_study_links_using_get(async=True)
        >>> result = thread.get()

        :param async bool
        :param str accession: Sample accession
        :param str result: The result type of links.
        :param int offset: How many records to skip from the beginning in the results. Default value is 0.
        :param int limit: The maximum number of records to retrieve. Default value is 100,000. If the full result set is to be fetched, the limit should be set to 0.
        :param str format: What format the results should be returned as: TSV (Tab Separated Values) or JSON. By default, a TSV report is provided.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.do_study_links_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.do_study_links_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def do_study_links_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """Study links  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.do_study_links_using_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str accession: Sample accession
        :param str result: The result type of links.
        :param int offset: How many records to skip from the beginning in the results. Default value is 0.
        :param int limit: The maximum number of records to retrieve. Default value is 100,000. If the full result set is to be fetched, the limit should be set to 0.
        :param str format: What format the results should be returned as: TSV (Tab Separated Values) or JSON. By default, a TSV report is provided.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accession', 'result', 'offset', 'limit', 'format']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method do_study_links_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'accession' in params:
            query_params.append(('accession', params['accession']))  # noqa: E501
        if 'result' in params:
            query_params.append(('result', params['result']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/links/study', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def do_taxon_links_using_get(self, **kwargs):  # noqa: E501
        """Taxonomy links  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.do_taxon_links_using_get(async=True)
        >>> result = thread.get()

        :param async bool
        :param str accession: Taxon Id
        :param str result: The result type of links.
        :param int offset: How many records to skip from the beginning in the results. Default value is 0.
        :param int limit: The maximum number of records to retrieve. Default value is 100,000. If the full result set is to be fetched, the limit should be set to 0.
        :param bool subtree: Inlcude Subtree
        :param str format: What format the results should be returned as: TSV (Tab Separated Values) or JSON. By default, a TSV report is provided.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.do_taxon_links_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.do_taxon_links_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def do_taxon_links_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """Taxonomy links  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.do_taxon_links_using_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str accession: Taxon Id
        :param str result: The result type of links.
        :param int offset: How many records to skip from the beginning in the results. Default value is 0.
        :param int limit: The maximum number of records to retrieve. Default value is 100,000. If the full result set is to be fetched, the limit should be set to 0.
        :param bool subtree: Inlcude Subtree
        :param str format: What format the results should be returned as: TSV (Tab Separated Values) or JSON. By default, a TSV report is provided.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accession', 'result', 'offset', 'limit', 'subtree', 'format']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method do_taxon_links_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'accession' in params:
            query_params.append(('accession', params['accession']))  # noqa: E501
        if 'result' in params:
            query_params.append(('result', params['result']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'subtree' in params:
            query_params.append(('subtree', params['subtree']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/links/taxon', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_doc_using_get(self, **kwargs):  # noqa: E501
        """Download the documentation as a PDF file.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.download_doc_using_get(async=True)
        >>> result = thread.get()

        :param async bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.download_doc_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.download_doc_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def download_doc_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """Download the documentation as a PDF file.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.download_doc_using_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_doc_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/doc', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def file_report_using_get(self, result, accession, **kwargs):  # noqa: E501
        """Get file report from warehouse search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.file_report_using_get(result, accession, async=True)
        >>> result = thread.get()

        :param async bool
        :param str result: The result type (data set) to search against. Is mandatory. (required)
        :param str accession: Accession (required)
        :param str fields: A list of fields (comma separated) to be returned in the result. If none supplied, the accession and ftp information for fastq,submitted and sra files will be returned.
        :param int offset: How many records to skip from the beginning in the results. Default value is 0.
        :param int limit: The maximum number of records to retrieve. Default value is 100,000. If the full result set is to be fetched, the limit should be set to 0.
        :param str format: What format the results should be returned as: TSV (Tab Separated Values) or JSON. By default, a TSV report is provided.
        :param bool download: Whether to download the result as a file, rather than read it from the stream. By default, this is false.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.file_report_using_get_with_http_info(result, accession, **kwargs)  # noqa: E501
        else:
            (data) = self.file_report_using_get_with_http_info(result, accession, **kwargs)  # noqa: E501
            return data

    def file_report_using_get_with_http_info(self, result, accession, **kwargs):  # noqa: E501
        """Get file report from warehouse search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.file_report_using_get_with_http_info(result, accession, async=True)
        >>> result = thread.get()

        :param async bool
        :param str result: The result type (data set) to search against. Is mandatory. (required)
        :param str accession: Accession (required)
        :param str fields: A list of fields (comma separated) to be returned in the result. If none supplied, the accession and ftp information for fastq,submitted and sra files will be returned.
        :param int offset: How many records to skip from the beginning in the results. Default value is 0.
        :param int limit: The maximum number of records to retrieve. Default value is 100,000. If the full result set is to be fetched, the limit should be set to 0.
        :param str format: What format the results should be returned as: TSV (Tab Separated Values) or JSON. By default, a TSV report is provided.
        :param bool download: Whether to download the result as a file, rather than read it from the stream. By default, this is false.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['result', 'accession', 'fields', 'offset', 'limit', 'format', 'download']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_report_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'result' is set
        if ('result' not in params or
                params['result'] is None):
            raise ValueError("Missing the required parameter `result` when calling `file_report_using_get`")  # noqa: E501
        # verify the required parameter 'accession' is set
        if ('accession' not in params or
                params['accession'] is None):
            raise ValueError("Missing the required parameter `accession` when calling `file_report_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'result' in params:
            query_params.append(('result', params['result']))  # noqa: E501
        if 'accession' in params:
            query_params.append(('accession', params['accession']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'download' in params:
            query_params.append(('download', params['download']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/filereport', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_controlled_vocab_using_get(self, field, **kwargs):  # noqa: E501
        """Get a list of available values for a controlled vocabulary field.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_controlled_vocab_using_get(field, async=True)
        >>> result = thread.get()

        :param async bool
        :param str field: Field name (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_controlled_vocab_using_get_with_http_info(field, **kwargs)  # noqa: E501
        else:
            (data) = self.get_controlled_vocab_using_get_with_http_info(field, **kwargs)  # noqa: E501
            return data

    def get_controlled_vocab_using_get_with_http_info(self, field, **kwargs):  # noqa: E501
        """Get a list of available values for a controlled vocabulary field.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_controlled_vocab_using_get_with_http_info(field, async=True)
        >>> result = thread.get()

        :param async bool
        :param str field: Field name (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['field']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_controlled_vocab_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `get_controlled_vocab_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'field' in params:
            query_params.append(('field', params['field']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/controlledVocab', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_results_using_get(self, data_portal, **kwargs):  # noqa: E501
        """Get a list of available result types (data sets) to search against.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_results_using_get(data_portal, async=True)
        >>> result = thread.get()

        :param async bool
        :param str data_portal: Data portal Id (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_results_using_get_with_http_info(data_portal, **kwargs)  # noqa: E501
        else:
            (data) = self.get_results_using_get_with_http_info(data_portal, **kwargs)  # noqa: E501
            return data

    def get_results_using_get_with_http_info(self, data_portal, **kwargs):  # noqa: E501
        """Get a list of available result types (data sets) to search against.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_results_using_get_with_http_info(data_portal, async=True)
        >>> result = thread.get()

        :param async bool
        :param str data_portal: Data portal Id (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_portal']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_results_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_portal' is set
        if ('data_portal' not in params or
                params['data_portal'] is None):
            raise ValueError("Missing the required parameter `data_portal` when calling `get_results_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'data_portal' in params:
            query_params.append(('dataPortal', params['data_portal']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/results', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_return_fields_using_get(self, result, **kwargs):  # noqa: E501
        """Get a list of fields that can be returned for a result type.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_return_fields_using_get(result, async=True)
        >>> result = thread.get()

        :param async bool
        :param str result: Result (required)
        :param str data_portal: Data portal Id
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_return_fields_using_get_with_http_info(result, **kwargs)  # noqa: E501
        else:
            (data) = self.get_return_fields_using_get_with_http_info(result, **kwargs)  # noqa: E501
            return data

    def get_return_fields_using_get_with_http_info(self, result, **kwargs):  # noqa: E501
        """Get a list of fields that can be returned for a result type.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_return_fields_using_get_with_http_info(result, async=True)
        >>> result = thread.get()

        :param async bool
        :param str result: Result (required)
        :param str data_portal: Data portal Id
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['result', 'data_portal']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_return_fields_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'result' is set
        if ('result' not in params or
                params['result'] is None):
            raise ValueError("Missing the required parameter `result` when calling `get_return_fields_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'data_portal' in params:
            query_params.append(('dataPortal', params['data_portal']))  # noqa: E501
        if 'result' in params:
            query_params.append(('result', params['result']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/returnFields', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_search_fields_using_get(self, result, **kwargs):  # noqa: E501
        """Get a list of searchable fields for a result type.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_search_fields_using_get(result, async=True)
        >>> result = thread.get()

        :param async bool
        :param str result: Result (required)
        :param str data_portal: Data portal Id
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_search_fields_using_get_with_http_info(result, **kwargs)  # noqa: E501
        else:
            (data) = self.get_search_fields_using_get_with_http_info(result, **kwargs)  # noqa: E501
            return data

    def get_search_fields_using_get_with_http_info(self, result, **kwargs):  # noqa: E501
        """Get a list of searchable fields for a result type.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_search_fields_using_get_with_http_info(result, async=True)
        >>> result = thread.get()

        :param async bool
        :param str result: Result (required)
        :param str data_portal: Data portal Id
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['result', 'data_portal']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_search_fields_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'result' is set
        if ('result' not in params or
                params['result'] is None):
            raise ValueError("Missing the required parameter `result` when calling `get_search_fields_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'data_portal' in params:
            query_params.append(('dataPortal', params['data_portal']))  # noqa: E501
        if 'result' in params:
            query_params.append(('result', params['result']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/searchFields', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_post_using_post(self, result, **kwargs):  # noqa: E501
        """Perform a warehouse search with POST  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.search_post_using_post(result, async=True)
        >>> result = thread.get()

        :param async bool
        :param str result: The result type (data set) to search against. Is mandatory. (required)
        :param str query: A set of search conditions joined by logical operators (AND, OR, NOT) and bound by double quotes. If none supplied, the full result set will be returned.
        :param str fields: A list of fields (comma separated) to be returned in the result. If none supplied, the accession and description/title of the main result object will be returned.
        :param str sort_fields: A list of fields (comma separated) in the order of which the results should be sorted.
        :param int offset: How many records to skip from the beginning in the results. Default value is 0.
        :param int limit: The maximum number of records to retrieve. Default value is 100,000. If the full result set is to be fetched, the limit should be set to 0.
        :param str data_portal: The data portal ID. Defaults to 'ena'.
        :param bool dcc_data_only: Whether to limit the search to only DCC records. By default, all public data is also included in the search.
        :param bool include_metagenomes: Whether to include public metagenome data in the search. By default, these are not included. Note that any metagenome data associated with a DCC hub will always be included in a search against that DCC.
        :param str email: Submit search and be notified via email when search result is ready for downloading. Mandatory if fields=all is set.
        :param str saved_search: The id to download the results of a previously submitted search. If this parameter is set, all additional parameters are ignored.
        :param str format: What format the results should be returned as: TSV (Tab Separated Values) or JSON. By default, a TSV report is provided.
        :param bool download: Whether to download the result as a file, rather than read it from the stream. By default, this is false.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.search_post_using_post_with_http_info(result, **kwargs)  # noqa: E501
        else:
            (data) = self.search_post_using_post_with_http_info(result, **kwargs)  # noqa: E501
            return data

    def search_post_using_post_with_http_info(self, result, **kwargs):  # noqa: E501
        """Perform a warehouse search with POST  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.search_post_using_post_with_http_info(result, async=True)
        >>> result = thread.get()

        :param async bool
        :param str result: The result type (data set) to search against. Is mandatory. (required)
        :param str query: A set of search conditions joined by logical operators (AND, OR, NOT) and bound by double quotes. If none supplied, the full result set will be returned.
        :param str fields: A list of fields (comma separated) to be returned in the result. If none supplied, the accession and description/title of the main result object will be returned.
        :param str sort_fields: A list of fields (comma separated) in the order of which the results should be sorted.
        :param int offset: How many records to skip from the beginning in the results. Default value is 0.
        :param int limit: The maximum number of records to retrieve. Default value is 100,000. If the full result set is to be fetched, the limit should be set to 0.
        :param str data_portal: The data portal ID. Defaults to 'ena'.
        :param bool dcc_data_only: Whether to limit the search to only DCC records. By default, all public data is also included in the search.
        :param bool include_metagenomes: Whether to include public metagenome data in the search. By default, these are not included. Note that any metagenome data associated with a DCC hub will always be included in a search against that DCC.
        :param str email: Submit search and be notified via email when search result is ready for downloading. Mandatory if fields=all is set.
        :param str saved_search: The id to download the results of a previously submitted search. If this parameter is set, all additional parameters are ignored.
        :param str format: What format the results should be returned as: TSV (Tab Separated Values) or JSON. By default, a TSV report is provided.
        :param bool download: Whether to download the result as a file, rather than read it from the stream. By default, this is false.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['result', 'query', 'fields', 'sort_fields', 'offset', 'limit', 'data_portal', 'dcc_data_only', 'include_metagenomes', 'email', 'saved_search', 'format', 'download']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_post_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'result' is set
        if ('result' not in params or
                params['result'] is None):
            raise ValueError("Missing the required parameter `result` when calling `search_post_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'result' in params:
            form_params.append(('result', params['result']))  # noqa: E501
        if 'query' in params:
            form_params.append(('query', params['query']))  # noqa: E501
        if 'fields' in params:
            form_params.append(('fields', params['fields']))  # noqa: E501
        if 'sort_fields' in params:
            form_params.append(('sortFields', params['sort_fields']))  # noqa: E501
        if 'offset' in params:
            form_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            form_params.append(('limit', params['limit']))  # noqa: E501
        if 'data_portal' in params:
            form_params.append(('dataPortal', params['data_portal']))  # noqa: E501
        if 'dcc_data_only' in params:
            form_params.append(('dccDataOnly', params['dcc_data_only']))  # noqa: E501
        if 'include_metagenomes' in params:
            form_params.append(('includeMetagenomes', params['include_metagenomes']))  # noqa: E501
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501
        if 'saved_search' in params:
            form_params.append(('savedSearch', params['saved_search']))  # noqa: E501
        if 'format' in params:
            form_params.append(('format', params['format']))  # noqa: E501
        if 'download' in params:
            form_params.append(('download', params['download']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_using_get(self, result, **kwargs):  # noqa: E501
        """Perform a warehouse search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.search_using_get(result, async=True)
        >>> result = thread.get()

        :param async bool
        :param str result: The result type (data set) to search against. Is mandatory. (required)
        :param str saved_search: The id to download the results of a previously submitted search. If this parameter is set, all additional parameters are ignored.
        :param str query: A set of search conditions joined by logical operators (AND, OR, NOT) and bound by double quotes. If none supplied, the full result set will be returned.
        :param str fields: A list of fields (comma separated) to be returned in the result. If none supplied, the accession and description/title of the main result object will be returned.
        :param str sort_fields: A list of fields (comma separated) in the order of which the results should be sorted.
        :param int offset: How many records to skip from the beginning in the results. Default value is 0.
        :param int limit: The maximum number of records to retrieve. Default value is 100,000. If the full result set is to be fetched, the limit should be set to 0.
        :param str data_portal: The data portal ID. Defaults to 'ena'.
        :param bool dcc_data_only: Whether to limit the search to only DCC records. By default, all public data is also included in the search.
        :param bool include_metagenomes: Whether to include public metagenome data in the search. By default, these are not included. Note that any metagenome data associated with a DCC hub will always be included in a search against that DCC.
        :param str format: What format the results should be returned as: TSV (Tab Separated Values) or JSON. By default, a TSV report is provided.
        :param bool download: Whether to download the result as a file, rather than read it from the stream. By default, this is false.
        :param str email: Submit search and be notified via email when search result is ready for downloading. Mandatory if fields=all is set.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.search_using_get_with_http_info(result, **kwargs)  # noqa: E501
        else:
            (data) = self.search_using_get_with_http_info(result, **kwargs)  # noqa: E501
            return data

    def search_using_get_with_http_info(self, result, **kwargs):  # noqa: E501
        """Perform a warehouse search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.search_using_get_with_http_info(result, async=True)
        >>> result = thread.get()

        :param async bool
        :param str result: The result type (data set) to search against. Is mandatory. (required)
        :param str saved_search: The id to download the results of a previously submitted search. If this parameter is set, all additional parameters are ignored.
        :param str query: A set of search conditions joined by logical operators (AND, OR, NOT) and bound by double quotes. If none supplied, the full result set will be returned.
        :param str fields: A list of fields (comma separated) to be returned in the result. If none supplied, the accession and description/title of the main result object will be returned.
        :param str sort_fields: A list of fields (comma separated) in the order of which the results should be sorted.
        :param int offset: How many records to skip from the beginning in the results. Default value is 0.
        :param int limit: The maximum number of records to retrieve. Default value is 100,000. If the full result set is to be fetched, the limit should be set to 0.
        :param str data_portal: The data portal ID. Defaults to 'ena'.
        :param bool dcc_data_only: Whether to limit the search to only DCC records. By default, all public data is also included in the search.
        :param bool include_metagenomes: Whether to include public metagenome data in the search. By default, these are not included. Note that any metagenome data associated with a DCC hub will always be included in a search against that DCC.
        :param str format: What format the results should be returned as: TSV (Tab Separated Values) or JSON. By default, a TSV report is provided.
        :param bool download: Whether to download the result as a file, rather than read it from the stream. By default, this is false.
        :param str email: Submit search and be notified via email when search result is ready for downloading. Mandatory if fields=all is set.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['result', 'saved_search', 'query', 'fields', 'sort_fields', 'offset', 'limit', 'data_portal', 'dcc_data_only', 'include_metagenomes', 'format', 'download', 'email']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'result' is set
        if ('result' not in params or
                params['result'] is None):
            raise ValueError("Missing the required parameter `result` when calling `search_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'result' in params:
            query_params.append(('result', params['result']))  # noqa: E501
        if 'saved_search' in params:
            query_params.append(('savedSearch', params['saved_search']))  # noqa: E501
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'sort_fields' in params:
            query_params.append(('sortFields', params['sort_fields']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'data_portal' in params:
            query_params.append(('dataPortal', params['data_portal']))  # noqa: E501
        if 'dcc_data_only' in params:
            query_params.append(('dccDataOnly', params['dcc_data_only']))  # noqa: E501
        if 'include_metagenomes' in params:
            query_params.append(('includeMetagenomes', params['include_metagenomes']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'download' in params:
            query_params.append(('download', params['download']))  # noqa: E501
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
